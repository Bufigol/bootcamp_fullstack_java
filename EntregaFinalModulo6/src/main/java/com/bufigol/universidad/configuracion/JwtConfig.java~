package com.bufigol.universidad.configuracion;

import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import lombok.Getter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;

import javax.crypto.SecretKey;
import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.util.Base64;

/**
 * Configuración para la gestión de JSON Web Tokens (JWT).
 * Esta clase maneja todas las configuraciones relacionadas con JWT, incluyendo
 * secretos, tiempos de expiración, y otros parámetros relevantes.
 *
 */
@Configuration
@Getter
public class JwtConfig {

    /**
     * Secreto usado para firmar los tokens JWT.
     */
    @Value("${jwt.secret:UniversidadDelosAndesSecretKey2024}")
    private String secret;

    /**
     * Tiempo de expiración del token en milisegundos.
     * Por defecto: 24 horas
     */
    @Value("${jwt.expiration:86400000}")
    private long expiration;

    /**
     * Nombre del header donde se enviará el token.
     */
    @Value("${jwt.header:Authorization}")
    private String header;

    /**
     * Prefijo del token en el header.
     */
    @Value("${jwt.prefix:Bearer }")
    private String prefix;

    /**
     * Audiencia esperada para el token.
     */
    @Value("${jwt.audience:universidad-api}")
    private String audience;

    /**
     * Emisor del token.
     */
    @Value("${jwt.issuer:universidad-auth}")
    private String issuer;

    /**
     * Tiempo de gracia para la expiración del token en milisegundos.
     * Por defecto: 1 hora
     */
    @Value("${jwt.clock-skew:3600000}")
    private long clockSkew;

    /**
     * Tiempo mínimo antes de considerar refrescar el token en milisegundos.
     * Por defecto: 30 minutos
     */
    @Value("${jwt.refresh-threshold:1800000}")
    private long refreshThreshold;

    /**
     * Algoritmo de firma para el token.
     */
    private final SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS512;

    /**
     * Obtiene la clave secreta codificada para firmar los tokens.
     *
     * @return La clave secreta como un array de bytes
     */
    public byte[] getSecretBytes() {
        return secret.getBytes(StandardCharsets.UTF_8);
    }

    /**
     * Genera una clave segura para firmar los tokens JWT.
     *
     * @return SecretKey generada
     */
    public SecretKey getSigningKey() {
        return Keys.hmacShaKeyFor(getSecretBytes());
    }

    /**
     * Obtiene la clave codificada en Base64.
     *
     * @return String con la clave en Base64
     */
    public String getBase64EncodedSecret() {
        return Base64.getEncoder().encodeToString(getSecretBytes());
    }

    /**
     * Obtiene la clave para verificar tokens.
     *
     * @return Key para verificación
     */
    public Key getVerificationKey() {
        return getSigningKey();
    }

    /**
     * Obtiene el token limpio sin el prefijo Bearer.
     *
     * @param token Token completo con prefijo
     * @return Token sin prefijo
     */
    public String stripPrefix(String token) {
        if (token != null && token.startsWith(getPrefix())) {
            return token.substring(getPrefix().length());
        }
        return token;
    }

    /**
     * Verifica si un token está próximo a expirar basado en el umbral de refresco.
     *
     * @param expirationTime Tiempo de expiración en milisegundos
     * @return true si el token está próximo a expirar
     */
    public boolean isTokenNearExpiration(long expirationTime) {
        long currentTime = System.currentTimeMillis();
        return (expirationTime - currentTime) < refreshThreshold;
    }

    /**
     * Construye el valor completo para el header de autorización.
     *
     * @param token Token JWT
     * @return String completo para el header
     */
    public String getAuthorizationHeader(String token) {
        return getPrefix() + token;
    }

    /**
     * Obtiene el tiempo de expiración calculado desde el momento actual.
     *
     * @return Tiempo de expiración en milisegundos
     */
    public long getExpirationTime() {
        return System.currentTimeMillis() + expiration;
    }

    /**
     * Verifica si un token ha expirado, considerando el tiempo de gracia.
     *
     * @param tokenExpirationTime Tiempo de expiración del token
     * @return true si el token ha expirado
     */
    public boolean isTokenExpired(long tokenExpirationTime) {
        return System.currentTimeMillis() > (tokenExpirationTime + clockSkew);
    }

    /**
     * Obtiene el tiempo mínimo de validez esperado para un token.
     *
     * @return Tiempo mínimo en milisegundos
     */
    public long getMinimumValidTime() {
        return System.currentTimeMillis() + refreshThreshold;
    }
}
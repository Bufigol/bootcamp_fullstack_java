package com.bufigol.evm6s5;

import com.bufigol.evm6s5.modelo.Pelicula;
import com.bufigol.evm6s5.servicio.PeliculaServicio;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;

@Slf4j
@SpringBootApplication
public class Evm6S5Application {

    public static void main(String[] args) {
        SpringApplication.run(Evm6S5Application.class, args);
    }

    @Bean
    public CommandLineRunner demo(PeliculaServicio peliculaServicio) {
        return args -> {
            log.info("Iniciando pruebas de operaciones CRUD de películas");

            // Crear películas de prueba
            Pelicula pelicula1 = Pelicula.builder()
                    .id(1L)
                    .titulo("El Padrino")
                    .director("Francis Ford Coppola")
                    .anio(1972)
                    .duracion(175)
                    .build();

            Pelicula pelicula2 = Pelicula.builder()
                    .id(1L) // Mismo ID que pelicula1
                    .titulo("Pulp Fiction")
                    .director("Quentin Tarantino")
                    .anio(1994)
                    .duracion(154)
                    .build();

            // 1. Prueba: Insertar dos películas con la misma id
            log.info("1. Prueba - Intentando insertar primera película");
            peliculaServicio.agregarPelicula(pelicula1);

            log.info("1. Prueba - Intentando insertar segunda película con mismo ID");
            peliculaServicio.agregarPelicula(pelicula2);

            // 2. Prueba: Eliminar la misma película dos veces
            log.info("2. Prueba - Intentando eliminar película por primera vez");
            peliculaServicio.eliminarPelicula(1L);

            log.info("2. Prueba - Intentando eliminar la misma película por segunda vez");
            peliculaServicio.eliminarPelicula(1L);

            // 3. Prueba: Actualizar los datos de una película inexistente
            Pelicula peliculaInexistente = Pelicula.builder()
                    .id(999L)
                    .titulo("Película Inexistente")
                    .director("Director Inexistente")
                    .anio(2024)
                    .duracion(120)
                    .build();

            log.info("3. Prueba - Intentando actualizar película inexistente");
            peliculaServicio.actualizarPelicula(peliculaInexistente);

            // 4. Prueba: Recuperar una película con una id no registrada
            log.info("4. Prueba - Intentando recuperar película con ID no registrado");
            peliculaServicio.obtenerPelicula(999L);

            // Mostrar todas las películas al final
            log.info("Lista final de películas en la base de datos:");
            peliculaServicio.obtenerTodas().forEach(p ->
                    log.info("Película: {}", p)
            );

            log.info("Finalización de pruebas de operaciones CRUD de películas");
        };
    }
}